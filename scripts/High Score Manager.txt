//----- Variables -----------------------------------------------------------------------------------------------------

balls = 0
BALLS LENGTH = 3
characters = abcdefghijklmnopqrstuvwxyz0123456789-_
cloud active? = true
highscores
i = 0
index = 1701
name = igk3at
NAME LENGTH = 11
rows = 0
ROWS LENGTH = 3
score = 5000
score index = 51
SCORE LENGTH = 6
segment = 
VERSION = 1


//----- Lists ---------------------------------------------------------------------------------------------------------

backup scores = { 
    0119080209203800000000907351601160916211605160116683000913211920080122053720638750503153320231500000000635400114090215090401071805617901815110315040518000000589302018232732313636363600509650315040914071821120519504801315091905191801012934481600301200119201
    8151608094788537200805051609030519204696516181506051919091514014573519211605181921191925014404523091414090528362733004381019130112121415190513014380505121201380114140138344380007151837040505000000004306501133816181538031504054289511180902121500000000004267
    0031503151421200701201542250192005011615012000000041770180504381409141001190041700130118091513011920051840980020114011401230500000040610200805161201140507212539350031512091413010303000038980040914151805242827000038690162116162516152305183038395080112062003
    0800000000381750121040915192001180212381600520080114362836283300377401701262829303823192431376951115200805260000000000375052625031809142009240000372300319283631333434330000361201609100114253807090514355402829300303150405180000348951605140721091413011105344
    0020080505241605182016183431515130507013804180505133412522052013011428000000003314010050516150606181501043268520151813010714050000003264511051919051238182114003253004212209143816151105133217520080515283232330000003145524051823091424161200003142501260828363
    1000000000030525200111051415111520152130370041801030118130914000030100
    0
    0
}
characters = { 
    a
    b
    c
    d
    e
    f
    g
    h
    i
    j
    k
    l
    m
    n
    o
    p
    q
    r
    s
    t
    u
    v
    w
    x
    y
    z
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    -
    _
}
high score segments = { 
    1815110315040518000000006400000021012104091519200118021200183100000030011000000000000000000000000000000520051624351800000000020182000000100810000000000000000001160100000006011809000000000000000000000000002121200000000000000000000156000000052020100000000000
    0000000000000000170100000000000000000003011800000011040114010000000000000200100000003010011032000000000000050000000000070113051910141400000000000100000022102010000000000000000000000000001430071518000000000000037040000000100000000000000000000000260100000005
    3003320000000000000003100000000003020101320000000000000000010000003112300201060000000000000000000000012000000000000000000009202500000007151502090700000000000000600000001111101100000000000000060900000000361304112312192300000000000000000011230110000000000000
    0000000000000008020920380000000000000090730000002000000000000000000000000021000000221003000000000000000006013000000001201202000000000000000900000000000201330511210000000000000000000000100000000000000000000008050800000013300201010000000000000000010000001101
    1330000000000000000055140000000120080114050914000000007080000000100320130000000000000000000000000003110508000000000000000201330000003105182000000000000000000000000000180130040100000000000000515100000001100130000000000000000000000000000105301201200000000000
    0110000000000100000000000000000000033719000000211605180621010000000000000000000002000000000000000000000003050000001803090112071207000000000000000000052030021100000000000000000000000002000000000000000000000191200000003021220700000000000000070000000000012305
    30303000000000000000630000000201203011000000000000081900000000022701200000000000000000500000000000000000000000000000000009180000000907113001200000000000005000000000
    
    
    
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(High Scores Read)
{
    Call version check;
    Call Read Highscores;
}

WhenBroadcastReceived(High Scores Write)
{
    If (cloud active? == "true")
    {
        Call version check;
        Call write highscores;
    }
}

WhenBroadcastReceived(initialise)
{
    Looks.Hide();
    NAME LENGTH = 11;
    SCORE LENGTH = 6;
    BALLS LENGTH = 3;
    ROWS LENGTH = 3;
    VERSION = 1;
    Call version check;
    Call Initialise;
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define Encode Highscores (warp=true)
{
    List.DeleteAll(high score segments);
    score index = 1;
    highscores = "";
    Repeat (50)
    {
        i = 1;
        Repeat (NAME LENGTH)
        {
            If (i > Variable.Length(Highscore.Name[score index]))
            {
                highscores = Operator.Join(highscores, 00);
            }
            Else
            {
                index = List.IndexOf(characters, Operator.LetterOf(Highscore.Name[score index], i));
                If (index < 10)
                {
                    highscores = Operator.Join(highscores, Operator.Join(0, index));
                }
                Else
                {
                    highscores = Operator.Join(highscores, index);
                }
            }
            i += 1;
        }
        score = Highscore.Score[score index];
        Repeat Until (Not ((Variable.Length(score) < SCORE LENGTH)))
        {
            score = Operator.Join(0, score);
        }
        index = 1;
        Repeat (SCORE LENGTH)
        {
            highscores = Operator.Join(highscores, Operator.LetterOf(score, index));
            index += 1;
        }
        rows = Highscore.Row[score index];
        Repeat Until (Not ((Variable.Length(rows) < ROWS LENGTH)))
        {
            rows = Operator.Join(0, rows);
        }
        index = 1;
        Repeat (ROWS LENGTH)
        {
            highscores = Operator.Join(highscores, Operator.LetterOf(rows, index));
            index += 1;
        }
        balls = Highscore.Ball[score index];
        Repeat Until (Not ((Variable.Length(balls) < BALLS LENGTH)))
        {
            balls = Operator.Join(0, balls);
        }
        index = 1;
        Repeat (BALLS LENGTH)
        {
            highscores = Operator.Join(highscores, Operator.LetterOf(balls, index));
            index += 1;
        }
        score index += 1;
    }
    index = 1;
    Repeat (10)
    {
        segment = "";
        Repeat (256)
        {
            If (Not ((index > Variable.Length(highscores))))
            {
                segment = Operator.Join(segment, Operator.LetterOf(highscores, index));
            }
            index += 1;
        }
        List.Add(high score segments, segment);
    }
}

Define Initialise (warp=true)
{
    characters = "abcdefghijklmnopqrstuvwxyz0123456789-_";
    List.DeleteAll(characters);
    index = 1;
    Repeat (Variable.Length(characters))
    {
        List.Add(characters, Operator.LetterOf(characters, index));
        index += 1;
    }
    List.DeleteAll(Highscore.Name);
    List.DeleteAll(Highscore.Score);
    List.DeleteAll(Highscore.Row);
    List.DeleteAll(Highscore.Ball);
    Repeat (50)
    {
        List.Add(Highscore.Name, "-rokcoder-");
        List.Add(Highscore.Score, 0);
        List.Add(Highscore.Row, 0);
        List.Add(Highscore.Ball, 0);
    }
    cloud active? = "false";
}

Define Read Highscores (warp=true)
{
    highscores = Operator.Join(☁ yucky asparagus - 0, Operator.Join(☁ yucky asparagus - 1, Operator.Join(☁ yucky asparagus - 2, Operator.Join(☁ yucky asparagus - 3, Operator.Join(☁ yucky asparagus - 4, Operator.Join(☁ yucky asparagus - 5, ☁ yucky asparagus - 6))))));
    If (Not ((highscores == "")))
    {
        cloud active? = "true";
        score index = 1;
        index = 1;
        Repeat (50)
        {
            name = "";
            Repeat (NAME LENGTH)
            {
                i = floor(Operator.Join(Operator.LetterOf(highscores, index), Operator.LetterOf(highscores, (index + 1))));
                If (i > 0)
                {
                    name = Operator.Join(name, characters[i]);
                }
                index += 2;
            }
            score = 0;
            Repeat (SCORE LENGTH)
            {
                score = ((score * 10) + Operator.LetterOf(highscores, index));
                index += 1;
            }
            rows = 0;
            Repeat (ROWS LENGTH)
            {
                rows = ((rows * 10) + Operator.LetterOf(highscores, index));
                index += 1;
            }
            balls = 0;
            Repeat (BALLS LENGTH)
            {
                balls = ((balls * 10) + Operator.LetterOf(highscores, index));
                index += 1;
            }
            List.ReplaceItem(Highscore.Name, score index, name);
            List.ReplaceItem(Highscore.Score, score index, score);
            List.ReplaceItem(Highscore.Row, score index, rows);
            List.ReplaceItem(Highscore.Ball, score index, balls);
            score index += 1;
        }
    }
}

Define version check (warp=false)
{
    If (Not ((VERSION == ☁ horrid celery)))
    {
        Control.Wait(0);
        Costume.GoToFrontBack(front);
        Looks.Show();
        Stop(all);
    }
}

Define write highscores (warp=false)
{
    Call Encode Highscores;
    ☁ yucky asparagus - 0 = high score segments[1];
    Control.Wait(0.15);
    ☁ yucky asparagus - 1 = high score segments[2];
    Control.Wait(0.15);
    ☁ yucky asparagus - 2 = high score segments[3];
    Control.Wait(0.15);
    ☁ yucky asparagus - 3 = high score segments[4];
    Control.Wait(0.15);
    ☁ yucky asparagus - 4 = high score segments[5];
    Control.Wait(0.15);
    ☁ yucky asparagus - 5 = high score segments[6];
    Control.Wait(0.15);
    ☁ yucky asparagus - 6 = high score segments[7];
}


//----- Orphaned blocks -----------------------------------------------------------------------------------------------

name length

score length

name length

score length

If (Sensing.Username() == "RokCoder")
{
    Call Initialise;
    cloud active? = "true";
    Event.BroadcastAndWait("High Scores Write");
    cloud active? = "false";
}

If (Sensing.Username() == "RokCoder")
{
    NAME LENGTH = 11;
    SCORE LENGTH = 5;
    BALLS LENGTH = 0;
    ROWS LENGTH = 0;
    Call Initialise;
    Call Read Highscores;
    ☁ yucky asparagus - 0 = backup scores[1];
    Control.Wait(0.15);
    ☁ yucky asparagus - 1 = backup scores[2];
    Control.Wait(0.15);
    ☁ yucky asparagus - 2 = backup scores[3];
    Control.Wait(0.15);
    ☁ yucky asparagus - 3 = backup scores[4];
    Control.Wait(0.15);
    ☁ yucky asparagus - 4 = backup scores[5];
    Control.Wait(0.15);
    ☁ yucky asparagus - 5 = backup scores[6];
    Control.Wait(0.15);
    ☁ yucky asparagus - 6 = backup scores[7];
    Control.Wait(0.15);
    If 
    {
        ☁ horrid celery = backup scores[8];
    }
}

If (Sensing.Username() == "RokCoder")
{
    List.DeleteAll(backup scores);
    List.Add(backup scores, ☁ yucky asparagus - 0);
    List.Add(backup scores, ☁ yucky asparagus - 1);
    List.Add(backup scores, ☁ yucky asparagus - 2);
    List.Add(backup scores, ☁ yucky asparagus - 3);
    List.Add(backup scores, ☁ yucky asparagus - 4);
    List.Add(backup scores, ☁ yucky asparagus - 5);
    List.Add(backup scores, ☁ yucky asparagus - 6);
    List.Add(backup scores, ☁ horrid celery);
}

If (Sensing.Username() == "RokCoder")
{
    Call Initialise;
    NAME LENGTH = 11;
    SCORE LENGTH = 5;
    BALLS LENGTH = 0;
    ROWS LENGTH = 0;
    Call Read Highscores;
    NAME LENGTH = 11;
    SCORE LENGTH = 6;
    BALLS LENGTH = 3;
    ROWS LENGTH = 3;
    Call write highscores;
    ☁ horrid celery = 1;
}


//----- Costumes ------------------------------------------------------------------------------------------------------

upgrade.svg


//----- Sounds --------------------------------------------------------------------------------------------------------

pop.wav
