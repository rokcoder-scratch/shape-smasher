//----- Variables -----------------------------------------------------------------------------------------------------

clone? = 0
column = 4
columns = 6
counter = -1
i = 1
index = 7
points = 2
pressed? = 
row = 0
total = 0


//----- Lists ---------------------------------------------------------------------------------------------------------

active blocks = { }
hit distribution = { 
    1
    0
    9
    2
    0
    0
}
order = { 
    1
    4
    2
    3
}


//----- Green flag events ---------------------------------------------------------------------------------------------

WhenGreenFlagClicked()
{
    Pen.Clear();
    Looks.Hide();
    Sound.SetVolumeTo(100);
    Call initialise;
    Event.Broadcast("play music");
    Control.CreateCloneOf(_myself_);
    row = 0;
    clone? = 0;
    SCREEN.X.OFFSET = -54;
    Motion.GoToXY(SCREEN.X.OFFSET, 0);
    Event.BroadcastAndWait("initialise");
    Score = 0;
    Costume.GoToFrontBack(front);
    Costume.MoveLayers(backward, 1);
    Event.Broadcast("update hud");
    Forever
    {
        Event.BroadcastAndWait("High Scores");
        Event.Broadcast("fade out title");
        Event.BroadcastAndWait("reset game");
        Score = 0;
        Call add row;
        Game over? = 0;
        Repeat Until (Game over? == 1)
        {
            Event.BroadcastAndWait("prepare counters");
            If (Not ((Selected activatable == POWERUP.FREEZE)))
            {
                Call scroll on new row;
            }
            Else
            {
                Call judder new row;
            }
            Event.Broadcast("reset activatables");
            If (Game over? == 0)
            {
                Event.Broadcast("update hud");
                Call get target;
                Call play level;
                If (Not ((Selected activatable == POWERUP.FREEZE)))
                {
                    Call add row;
                }
            }
        }
        Event.Broadcast("fade in title");
        Event.BroadcastAndWait("update high score table");
        Event.Broadcast("remove sprites");
    }
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(music off)
{
    Sound.SetVolumeTo(0);
}

WhenBroadcastReceived(music on)
{
    Sound.SetVolumeTo(100);
}

WhenBroadcastReceived(play music)
{
    Forever
    {
        Sound.PlayUntilDone(order[1]);
        List.Add(order, order[1]);
        List.DeleteItem(order, 1);
    }
}

WhenBroadcastReceived(reset game)
{
    List.DeleteAll(NewRow.ObstacleData);
    List.DeleteAll(NewRow.BonusData);
    row = 0;
}


//----- Start as clone ------------------------------------------------------------------------------------------------

Control.WhenIStartAsClone()
{
    clone? = 1;
    Looks.Show();
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define //TODO(string comment) (warp=false)
{
}

Define add row (warp=true)
{
    columns = (7 - ((row % 2) == 1));
    total = (columns + (row * 2));
    List.DeleteAll(hit distribution);
    Repeat (columns)
    {
        List.Add(hit distribution, 0);
    }
    Repeat Until (total == 0)
    {
        column = Operator.Random(1 / columns);
        points = Operator.Random(1 / total);
        List.ReplaceItem(hit distribution, column, (hit distribution[column] + points));
        total += ( - points);
    }
    index = 1;
    Repeat (columns)
    {
        If ((hit distribution[index] > 0) Or (Operator.Random(0.0 / 1.0) < (0.3 + (0.2 * (row < 5)))))
        {
            If (hit distribution[index] > 0)
            {
                List.Add(NewRow.ObstacleData, (SCREEN.X.OFFSET + ((22.5 * ((row % 2) == 1)) - ((4 - index) * 45))));
                List.Add(NewRow.ObstacleData, hit distribution[index]);
                If (Operator.Random(0.0 / 1.0) < (row / 200))
                {
                    List.Add(NewRow.ObstacleData, Operator.Random((0.0 - (floor((row / 8)) / 32)) / (0.0 + (floor((row / 8)) / 32))));
                }
                Else
                {
                    If (Operator.Random(0 / 99) < 5)
                    {
                        If (Operator.Random(0 / 99) < 50)
                        {
                            List.Add(NewRow.ObstacleData, Operator.Random(-0.6 / -0.3));
                        }
                        Else
                        {
                            List.Add(NewRow.ObstacleData, Operator.Random(0.3 / 0.6));
                        }
                    }
                    Else
                    {
                        List.Add(NewRow.ObstacleData, 0);
                    }
                }
                Control.CreateCloneOf(obstacles);
            }
            Else
            {
                List.Add(NewRow.BonusData, (SCREEN.X.OFFSET + ((22.5 * ((row % 2) == 1)) - ((4 - index) * 45))));
                Control.CreateCloneOf(bonuses);
            }
        }
        index += 1;
    }
    row += 1;
}

Define blocks go boom (warp=false)
{
    Call collect active block indexes;
    Forever
    {
        If (List.Length(active blocks) == 0)
        {
            Stop(this script);
        }
        i = Operator.Random(1 / List.Length(active blocks));
        index = active blocks[i];
        List.DeleteItem(active blocks, i);
        If (index > 0)
        {
            Score += (Obstacle.Hits remaining[index] * 5);
            List.ReplaceItem(Obstacle.hit?, index, 1);
            List.ReplaceItem(Obstacle.Hits remaining, index, 0);
        }
        Else
        {
            index = ( - index);
            List.ReplaceItem(Bonus.hit?, index, 1);
            List.ReplaceItem(Bonus.hits remaining, index, 0);
        }
        Repeat (4)
        {
            Event.Broadcast("update hits on objects");
            Event.Broadcast("update objects appearence");
            Event.Broadcast("update hud");
        }
    }
}

Define collect active block indexes (warp=true)
{
    List.DeleteAll(active blocks);
    Call //TODO("Another case where I shouldn't be starting at one");
    index = 1;
    Repeat (List.Length(Obstacle.Hits remaining))
    {
        If (Obstacle.Hits remaining[index] > 0)
        {
            List.Add(active blocks, index);
        }
        index += 1;
    }
    Call //TODO("Another case where I shouldn't be starting at one");
    index = 1;
    Repeat (List.Length(Bonus.hits remaining))
    {
        If (Bonus.hits remaining[index] > 0)
        {
            List.Add(active blocks, ( - index));
        }
        index += 1;
    }
}

Define get target (warp=false)
{
    Event.Broadcast("prepare target");
    Event.BroadcastAndWait("show available activatables");
    Sensing.ResetTimer();
    counter = -1;
    pressed? = Sensing.MouseDown();
    Forever
    {
        Event.Broadcast("calculate target velocity");
        Event.Broadcast("show target");
        Event.Broadcast("update objects appearence");
        If ((Sensing.MouseX() > -224) And (Sensing.MouseX() < 114))
        {
            If ((Not (Sensing.MouseDown())) And (pressed? == 1))
            {
                If (counter == 0)
                {
                    Event.Broadcast("remove target");
                    Event.Broadcast("hide activatables");
                    Stop(this script);
                }
                pressed? = 0;
            }
            If (Sensing.MouseDown() And (pressed? == 0))
            {
                If (counter == 0)
                {
                    Event.Broadcast("remove target");
                    Stop(this script);
                }
                pressed? = 1;
                counter = 0;
            }
        }
    }
}

Define initialise (warp=true)
{
    List.DeleteAll(order);
    Repeat (4)
    {
        List.InsertItem(order, Operator.Random(1 / (List.Length(order) + 1)), (List.Length(order) + 1));
    }
}

Define judder new row (warp=false)
{
    Event.Broadcast("shake padlock");
    Repeat (16)
    {
        Event.Broadcast("raise row by three pixels");
        Event.Broadcast("update object positions");
        Event.Broadcast("update objects appearence");
        Control.Wait(0);
        Event.Broadcast("drop by 3 pixels");
        Event.Broadcast("update object positions");
        Event.Broadcast("update objects appearence");
    }
    Event.Broadcast("remove padlock");
}

Define play level (warp=false)
{
    Event.Broadcast("reset balls");
    If (Selected activatable == POWERUP.BOOM)
    {
        Call blocks go boom;
    }
    Else
    {
        If (Selected activatable == POWERUP.POLYUP)
        {
            Event.Broadcast("poly up");
        }
        All balls gone? = 0;
        If (Selected activatable == POWERUP.BOUNCEFLOOR)
        {
            Control.CreateCloneOf(trampoline);
        }
        Else
        {
            If (Selected activatable == POWERUP.FREEZE)
            {
                Control.CreateCloneOf(padlock);
                Event.Broadcast("freeze rotations");
            }
        }
        Repeat Until (All balls gone? == 1)
        {
            Pen.Clear();
            Event.Broadcast("hide effects");
            Event.Broadcast("update ball");
            Event.Broadcast("update hits on objects");
            Event.Broadcast("update objects appearence");
            Event.Broadcast("update hud");
        }
        Event.Broadcast("remove trampoline");
    }
}

Define scroll on new row (warp=false)
{
    Repeat (15)
    {
        Event.Broadcast("raise row by three pixels");
        Event.Broadcast("update object positions");
        Event.Broadcast("update objects appearence");
    }
}


//----- Costumes ------------------------------------------------------------------------------------------------------

background.svg


//----- Sounds --------------------------------------------------------------------------------------------------------

bensound-buddy.mp3
bensound-funnysong.mp3
bensound-hey.mp3
bensound-jazzyfrenchy.mp3
