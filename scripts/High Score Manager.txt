//----- Variables -----------------------------------------------------------------------------------------------------

balls = 38
BALLS LENGTH = 3
characters = abcdefghijklmnopqrstuvwxyz0123456789-_
cloud active? = true
highscores = 1615192836363600000000112265249518413120318050120051800000348255263098041801071514021520320003194952510881608011420151306091805028117523511407180507012011210000000272170232107032515200519050120151802458602211050301200418010715143528023492521709318151103150405180000000220370212095100305160801190000000002106952050782025120120180924000000020460020207222180103202700000000000189670194079080908091315151905190001397351670830401181112012201000000012628515807413051919252835000000000118055154085190318012003081514120901067601460672018311404210302270000010067014107903151512380731323300000096150140073091215080315120000000000891951330572829303132333435362737008222012606004251201140815343330000079570125057200805200907051830320000745451230530122142524000000000000007389012105603250205180315040518320066535114046031512151812051919230900641151130611413200113292728280000005817010804606152405010712050000000055290104037071801160809240724000000550501040381901130907011305091500005321510304119031801200308250301200050805100033190113173331000000000000505950990600114041805231129272827004212509204003080519190315230000000040560091044031805031504051800000000390050880501911370105012437292900003860508804814011901130516000000000036800085047231502022106060520060100360650850370415070709053229300000003543008505313050120020112120709260034685085040172305182025160905190500345000830410403150405382835000000003319008103805220518151405282930000032595081036100518112502180903110000319200820402005192021190518292731002882507504302120104091605201815220028470075037110918051410011121290000282050760421916011811120511092020002747507304204011820082201040518310027185074036101507091418011500000000254950720270102050403151512190318002479506904112050118141903180120030022580067038
i = 3
index = 1751
name = learnscratc
NAME LENGTH = 11
rows = 67
ROWS LENGTH = 3
score = 22580
score index = 51
SCORE LENGTH = 7
segment = 
VERSION = 6


//----- Lists ---------------------------------------------------------------------------------------------------------

backup scores = { 
    0718050701201121000000272170232107161519283636360000000012265249518413120318050120051800003482552630980418010715140215203200319495251088160801142015130609180528117523511403251520051905012015182458602211050301200418010715143528234925217093181511031504051800
    0000220370212095100305160801190000000021069520507820251201201809240000002046002020722218010320270000000000189670194079080908091315151905190013973516708304011811120122010000001262851580741305191925283500000000118055154085190318012003081514120910676014606720
    1831140421030227000010067014107903151512380731323300000961501400730912150803151200000000089195133057282930313233343536273708222012606004251201140815343330000795701250572008052009070518303200074545123053012214252400000000000007389012105603250205180315040518
    3206653511404603151215181205191923090641151130611413200113292728280000058170108046061524050107120500000005529010403707180116080924072400000550501040381901130907011305091500053215103041190318012003082503012005080510003319011317333100000000000505950990600114
    0418052311292728270421250920400308051919031523000000040560091044031805031504051800000003900508805019113701050124372929000386050880481401190113051600000000036800085047231502022106060520060103606508503704150707090532293000000354300850531305012002011212070926
    0346850850401723051820251609051905034500083041040315040538283500000003319008103805220518151405282930000325950810361005181125021809031100031920082040200519202119051829273102882507504302120104091605201815220284700750371109180514100111212900028205076042191601
    18111205110920200274750730420401182008220104051831027185074036101507091418011500000002549507202701020504031515121903180247950690411205011814190318012003022580067038
    4
}
characters = { 
    a
    b
    c
    d
    e
    f
    g
    h
    i
    j
    k
    l
    m
    n
    o
    p
    q
    r
    s
    t
    u
    v
    w
    x
    y
    z
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    -
    _
}
high score segments = { 
    1615192836363600000000112265249518413120318050120051800000348255263098041801071514021520320003194952510881608011420151306091805028117523511407180507012011210000000272170232107032515200519050120151802458602211050301200418010715143528023492521709318151103150
    4051800000002203702120951003051608011900000000021069520507820251201201809240000000204600202072221801032027000000000001896701940790809080913151519051900013973516708304011811120122010000000126285158074130519192528350000000001180551540851903180120030815141209
    0106760146067201831140421030227000001006701410790315151238073132330000009615014007309121508031512000000000089195133057282930313233343536273700822201260600425120114081534333000007957012505720080520090705183032000074545123053012214252400000000000000738901210
    5603250205180315040518320066535114046031512151812051919230900641151130611413200113292728280000005817010804606152405010712050000000055290104037071801160809240724000000550501040381901130907011305091500005321510304119031801200308250301200050805100033190113173
    3310000000000005059509906001140418052311292728270042125092040030805191903152300000000405600910440318050315040518000000003900508805019113701050124372929000038605088048140119011305160000000000368000850472315020221060605200601003606508503704150707090532293000
    0000354300850531305012002011212070926003468508504017230518202516090519050034500083041040315040538283500000000331900810380522051815140528293000003259508103610051811250218090311000031920082040200519202119051829273100288250750430212010409160520181522002847007
    5037110918051410011121290000282050760421916011811120511092020002747507304204011820082201040518310027185074036101507091418011500000000254950720270102050403151512190318002479506904112050118141903180120030022580067038
    
    
    
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(High Scores Read)
{
    Call version check;
    Call Read Highscores;
}

WhenBroadcastReceived(High Scores Write)
{
    If (cloud active? == "true")
    {
        Call version check;
        Call write highscores;
    }
}

WhenBroadcastReceived(initialise)
{
    Looks.Hide();
    Call init constants;
    Call version check;
    Call Initialise;
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define Encode Highscores (warp=true)
{
    List.DeleteAll(high score segments);
    score index = 1;
    highscores = "";
    Repeat (50)
    {
        i = 1;
        Repeat (NAME LENGTH)
        {
            If (i > Variable.Length(Highscore.Name[score index]))
            {
                highscores = Operator.Join(highscores, 00);
            }
            Else
            {
                index = List.IndexOf(characters, Operator.LetterOf(Highscore.Name[score index], i));
                If (index < 10)
                {
                    highscores = Operator.Join(highscores, Operator.Join(0, index));
                }
                Else
                {
                    highscores = Operator.Join(highscores, index);
                }
            }
            i += 1;
        }
        score = Highscore.Score[score index];
        Repeat Until (Not ((Variable.Length(score) < SCORE LENGTH)))
        {
            score = Operator.Join(0, score);
        }
        index = 1;
        Repeat (SCORE LENGTH)
        {
            highscores = Operator.Join(highscores, Operator.LetterOf(score, index));
            index += 1;
        }
        rows = Highscore.Row[score index];
        Repeat Until (Not ((Variable.Length(rows) < ROWS LENGTH)))
        {
            rows = Operator.Join(0, rows);
        }
        index = 1;
        Repeat (ROWS LENGTH)
        {
            highscores = Operator.Join(highscores, Operator.LetterOf(rows, index));
            index += 1;
        }
        balls = Highscore.Ball[score index];
        Repeat Until (Not ((Variable.Length(balls) < BALLS LENGTH)))
        {
            balls = Operator.Join(0, balls);
        }
        index = 1;
        Repeat (BALLS LENGTH)
        {
            highscores = Operator.Join(highscores, Operator.LetterOf(balls, index));
            index += 1;
        }
        score index += 1;
    }
    index = 1;
    Repeat (10)
    {
        segment = "";
        Repeat (256)
        {
            If (Not ((index > Variable.Length(highscores))))
            {
                segment = Operator.Join(segment, Operator.LetterOf(highscores, index));
            }
            index += 1;
        }
        List.Add(high score segments, segment);
    }
}

Define init constants (warp=true)
{
    NAME LENGTH = 11;
    SCORE LENGTH = 7;
    BALLS LENGTH = 3;
    ROWS LENGTH = 3;
    VERSION = 6;
}

Define Initialise (warp=true)
{
    characters = "abcdefghijklmnopqrstuvwxyz0123456789-_";
    List.DeleteAll(characters);
    index = 1;
    Repeat (Variable.Length(characters))
    {
        List.Add(characters, Operator.LetterOf(characters, index));
        index += 1;
    }
    List.DeleteAll(Highscore.Name);
    List.DeleteAll(Highscore.Score);
    List.DeleteAll(Highscore.Row);
    List.DeleteAll(Highscore.Ball);
    Repeat (50)
    {
        List.Add(Highscore.Name, "-rokcoder-");
        List.Add(Highscore.Score, 0);
        List.Add(Highscore.Row, 0);
        List.Add(Highscore.Ball, 0);
    }
    cloud active? = "false";
}

Define Read Highscores (warp=true)
{
    highscores = Operator.Join(☁ stupid cloud 0, Operator.Join(☁ stupid cloud 1, Operator.Join(☁ stupid cloud 2, Operator.Join(☁ stupid cloud 3, Operator.Join(☁ stupid cloud 4, Operator.Join(☁ stupid cloud 5, ☁ stupid cloud 6))))));
    If (Not ((highscores == "")))
    {
        cloud active? = "true";
        score index = 1;
        index = 1;
        Repeat (50)
        {
            name = "";
            Repeat (NAME LENGTH)
            {
                i = floor(Operator.Join(Operator.LetterOf(highscores, index), Operator.LetterOf(highscores, (index + 1))));
                If (i > 0)
                {
                    name = Operator.Join(name, characters[i]);
                }
                index += 2;
            }
            score = 0;
            Repeat (SCORE LENGTH)
            {
                score = ((score * 10) + Operator.LetterOf(highscores, index));
                index += 1;
            }
            rows = 0;
            Repeat (ROWS LENGTH)
            {
                rows = ((rows * 10) + Operator.LetterOf(highscores, index));
                index += 1;
            }
            balls = 0;
            Repeat (BALLS LENGTH)
            {
                balls = ((balls * 10) + Operator.LetterOf(highscores, index));
                index += 1;
            }
            List.ReplaceItem(Highscore.Name, score index, name);
            List.ReplaceItem(Highscore.Score, score index, score);
            List.ReplaceItem(Highscore.Row, score index, rows);
            List.ReplaceItem(Highscore.Ball, score index, balls);
            score index += 1;
        }
    }
}

Define version check (warp=false)
{
    If (Not ((VERSION == ☁ stupid cloud version)))
    {
        Control.Wait(0);
        Costume.GoToFrontBack(front);
        Looks.Show();
        Stop(all);
    }
}

Define write highscores (warp=false)
{
    Call Encode Highscores;
    ☁ stupid cloud 0 = high score segments[1];
    Control.Wait(0.15);
    ☁ stupid cloud 1 = high score segments[2];
    Control.Wait(0.15);
    ☁ stupid cloud 2 = high score segments[3];
    Control.Wait(0.15);
    ☁ stupid cloud 3 = high score segments[4];
    Control.Wait(0.15);
    ☁ stupid cloud 4 = high score segments[5];
    Control.Wait(0.15);
    ☁ stupid cloud 5 = high score segments[6];
    Control.Wait(0.15);
    ☁ stupid cloud 6 = high score segments[7];
}


//----- Orphaned blocks -----------------------------------------------------------------------------------------------

name length

score length

name length

score length

If (Sensing.Username() == "RokCoder")
{
    ☁ stupid cloud version = 4;
    Call init constants;
    Call Initialise;
    cloud active? = "true";
    Event.BroadcastAndWait("High Scores Write");
    cloud active? = "false";
}

If (Sensing.Username() == "RokCoder")
{
    NAME LENGTH = 11;
    SCORE LENGTH = 6;
    BALLS LENGTH = 3;
    ROWS LENGTH = 3;
    Call Initialise;
    Call Read Highscores;
    ☁ stupid cloud 0 = backup scores[1];
    Control.Wait(0.15);
    ☁ stupid cloud 1 = backup scores[2];
    Control.Wait(0.15);
    ☁ stupid cloud 2 = backup scores[3];
    Control.Wait(0.15);
    ☁ stupid cloud 3 = backup scores[4];
    Control.Wait(0.15);
    ☁ stupid cloud 4 = backup scores[5];
    Control.Wait(0.15);
    ☁ stupid cloud 5 = backup scores[6];
    Control.Wait(0.15);
    ☁ stupid cloud 6 = backup scores[7];
    Control.Wait(0.15);
    If 
    {
        ☁ stupid cloud version = backup scores[8];
    }
}

If (Sensing.Username() == "RokCoder")
{
    List.DeleteAll(backup scores);
    List.Add(backup scores, ☁ stupid cloud 0);
    List.Add(backup scores, ☁ stupid cloud 1);
    List.Add(backup scores, ☁ stupid cloud 2);
    List.Add(backup scores, ☁ stupid cloud 3);
    List.Add(backup scores, ☁ stupid cloud 4);
    List.Add(backup scores, ☁ stupid cloud 5);
    List.Add(backup scores, ☁ stupid cloud 6);
    List.Add(backup scores, ☁ stupid cloud version);
}

If (Sensing.Username() == "RokCoder")
{
    Call init constants;
    Call Initialise;
    Event.BroadcastAndWait("High Scores Read");
    SCORE LENGTH = 7;
    Event.BroadcastAndWait("High Scores Write");
}


//----- Costumes ------------------------------------------------------------------------------------------------------

upgrade.svg


//----- Sounds --------------------------------------------------------------------------------------------------------

pop.wav
